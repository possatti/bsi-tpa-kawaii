#!/usr/bin/env python3
# -*- coding: UTF-8 -*-

import argparse
import timeit
import time

from kawaii import algoritmos, gerador, persistencia, inspetor

# Define os métodos de ordenação
METODOS_DE_ORDENACAO = {
	'selection': algoritmos.selectsort,
	'insertion': algoritmos.insertionSort,
	'quick': algoritmos.quicksort,
	'shell': algoritmos.shellSort,
	'default': lambda l: l.sort() }

def gerar(args):
	# Provê um nome se já não houver um específicado
	if not args.nome_arquivo:
		args.nome_arquivo = str(args.num_clientes) + "-clientes.pkl"

	# Prepara o código que será cronometrado
	setup = 'from kawaii import gerador'
	statement = 'gerador.gerar_lote_clientes("{}", {}, buffer_size={})'.format(args.nome_arquivo, args.num_clientes, args.tam_buffer)

	# Executa o código
	tempo = timeit.timeit(statement, setup, number=1)

	# Exibe o desemplenho da execução, caso o usuário não específique o contrário
	if not args.quiet:
		print("O arquivo '" + args.nome_arquivo + "' foi criado contendo " + str(args.num_clientes) + ' clientes fora de ordem.')
		print('Tempo de execução: ' + str(tempo) + ' segundos.')

def ordenar(args):
	# Lê os clientes do arquivo para a memória
	with open(args.arquivo_entrada, 'rb') as arq:
		clientes = persistencia.ler_clientes(arq)

	# Inicia a contagem de tempo
	inicio = time.time()

	# Ordena os clientes
	metodo = METODOS_DE_ORDENACAO[args.metodo]
	metodo(clientes)

	# Finaliza a contagem de tempo
	fim = time.time()

	# Calcula o tempo de execução
	tempo = fim - inicio

	# Grava o resultado da ordenação no arquivo indicado
	with open(args.arquivo_saida, 'wb') as arq:
		persistencia.gravar_clientes(arq, clientes)

	# Exibe o desemplenho da execução, caso o usuário não específique o contrário
	if not args.quiet:
		print("O arquivo '" + args.arquivo_entrada + "' foi ordenado para o arquivo '" + args.arquivo_saida + "'.")
		print('Tempo gasto com a ordenação: ' + str(tempo) + ' segundos.')

def verificar(args):
	# Abre o arquivo a ser verificado
	with open(args.nome_arquivo, 'rb') as arq:
		# Verifica se os clientes estão ordenados
		ordenado = inspetor.estao_ordenados(arq)

		# Retorna o cursor para o início do arquivo
		arq.seek(0)

		# Verifica o número de clientes
		quantidade = inspetor.quantidade_de_clientes(arq)

	# Obtém o tamanho do arquivo
	tamanho = inspetor.tamanho_do_arquivo(args.nome_arquivo)

	# Exibe as informações sobre o arquivo
	if ordenado:
		print("O arquivo '" + args.nome_arquivo + "' está " + \
			"ordenado" + \
			", contém " + str(quantidade) + \
			" clientes, e tem o tamanho de " + str(tamanho) + " bytes.")
	else:
		print("O arquivo '" + args.nome_arquivo + "' está " + \
			"desordenado" + \
			", contém " + str(quantidade) + \
			" clientes, e tem o tamanho de " + str(tamanho) + " bytes.")
		#sep='') # Não está funcionando

# Cria o parser raíz
parser = argparse.ArgumentParser(
	description="Programa de ordenação para o trabalho de TPA.")
subparsers = parser.add_subparsers()

# Cria o parser para o subcomando "gerar"
parser_gerar = subparsers.add_parser('gerar', help='Gera um arquivo binário com vários clientes fora de ordem.')
parser_gerar.add_argument('num_clientes', type=int, help='Número de clientes a serem gerados.')
parser_gerar.add_argument('nome_arquivo', nargs='?', help='Nome do arquivo, no qual os clientes serão persistidos.')
parser_gerar.add_argument('-q', '--quiet', action='store_true', help='Gera o arquivo sem exibir qualquer saída.')
parser_gerar.add_argument('-b', '--tam_buffer', default=-1, help='Tamanho (em bytes) do buffer que será utilizado para a gravação no arquivo. Caso não seja específicado, será utilizado um buffer de tamanho padrão. Para não utilizar buffer algum, específique um buffer de tamanho 0.')
parser_gerar.set_defaults(func=gerar)

# Cria o parser para o subcomando "ordenar"
parser_ordenar = subparsers.add_parser('ordenar', help='Ordena um arquivo contendo clientes.')
parser_ordenar.add_argument('arquivo_entrada', help='Nome do arquivo que será ordenado.')
parser_ordenar.add_argument('arquivo_saida', help='Quando presente, ordenará os clientes para esse arquivo, ao invés do arquivo de entrada.')
parser_ordenar.add_argument('-q', '--quiet', action='store_true', help='Gera o arquivo sem exibir qualquer saída.')
parser_ordenar.add_argument('-m', '--metodo', choices=METODOS_DE_ORDENACAO, default='default', help='Específica qual método de ordenação deverá ser usado.')
parser_ordenar.set_defaults(func=ordenar)

# Cria o parser para o subcomando "verificar"
parser_verificar = subparsers.add_parser('verificar', help='Busca informações a respeito de um arquivo (ex. se os clientes estão ordenados, o tamanho do arquivo, e quantos clientes há nele).')
parser_verificar.add_argument('nome_arquivo', help='Nome do arquivo a ser verificado.')
parser_verificar.set_defaults(func=verificar)

# Faz o parsing da lista de argumentos
args = parser.parse_args()

# Verifica se o usuário chamou um subcomando adequadamente
if 'func' in vars(args):
	args.func(args)
# Se não, exibe ajuda
else:
	parser.print_help()
